openapi: "3.0.2"
info:
  title: Data Health models
  version: "1.0"
paths:
  /controls:
    get:
      operationId: List Controls
      description: List all controls.
      tags:
        - Control
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 100
                  value:
                    type: array
                    items:
                      $ref: "#/components/schemas/Control"
    post:
      operationId: Create Control
      description: Create a control.
      tags:
        - Control
      parameters:
        - name: withNewAssessment
          in: query
          schema:
            type: boolean
            description: Create a new empty assessment for the control.
            example: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Control"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Control"

  /controls/{controlId}:
    parameters:
      - name: controlId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: Get Control By ID
      description: Get a control by id.
      tags:
        - Control
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Control"
    put:
      operationId: Update Control By ID
      description: Update a control.
      tags:
        - Control
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Control"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Control"
    delete:
      operationId: Delete Control By ID
      description: Delete a control.
      tags:
        - Control
      responses:
        "204":
          description: OK

  /controls/{controlId}/trigger:
    parameters:
      - name: controlId
        in: path
        required: true
        schema:
          type: string
    post:
      operationId: Trigger schedule
      description: Trigger a schedule by id.
      tags:
        - Control
      responses:
        "200":
          description: OK

  /controls/schedule:
    get:
      operationId: Get Schedule
      description: Get Schedule.
      tags:
        - Schedule
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"
    put:
      operationId: Create/Update Schedule
      description: Create or Update Schedule.
      tags:
        - Schedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Schedule"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schedule"

  /controls/schedule/trigger:
    post:
      operationId: Trigger Schedule
      description: Trigger Schedule.
      tags:
        - Schedule
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  succeeded:
                    type: boolean

  /controls/alert:
    get:
      operationId: Get Alert
      description: Get Alert.
      tags:
        - Alert
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alert"
    put:
      operationId: Create/Update Alert
      description: Create or Update Alert.
      tags:
        - Alert
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Alert"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Alert"

  /controls/statusPalette:
    get:
      operationId: List Status Palettes
      description: List all status palettes.
      tags:
        - StatusPalette
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 100
                  value:
                    type: array
                    items:
                      $ref: "#/components/schemas/StatusPalette"
    post:
      operationId: Create Status Palette
      description: Create a status palette.
      tags:
        - StatusPalette
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatusPalette"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusPalette"

  /controls/statusPalette/{statusPaletteId}:
    parameters:
      - name: statusPaletteId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: Get Status Palette By ID
      description: Get a status palette by id.
      tags:
        - StatusPalette
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusPalette"
    put:
      operationId: Update Status Palette By ID
      description: Update a status palette.
      tags:
        - StatusPalette
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatusPalette"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusPalette"
    delete:
      operationId: Delete Status Palette By ID
      description: Delete a status palette.
      tags:
        - StatusPalette
      responses:
        "204":
          description: OK

  /controls/assessments:
    get:
      operationId: List Assessments
      description: List all assessments.
      tags:
        - Assessment
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 100
                  value:
                    type: array
                    items:
                      $ref: "#/components/schemas/Assessment"
    post:
      operationId: Create Assessment
      description: Create an assessment.
      tags:
        - Assessment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Assessment"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assessment"

  /controls/assessments/{assessmentId}:
    parameters:
      - name: assessmentId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: Get Assessment By ID
      description: Get an assessment by id.
      tags:
        - Assessment
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assessment"
    put:
      operationId: Update Assessment By ID
      description: Update an assessment.
      tags:
        - Assessment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Assessment"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assessment"
    delete:
      operationId: Delete Assessment By ID
      description: Delete an assessment.
      tags:
        - Assessment
      responses:
        "204":
          description: OK

  /actions/query:
    post:
      operationId: get actions by query filters
      description: List all actions with a query.
      tags:
        - Actions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: "#/components/schemas/actionFilter"
                pageSize:
                  type: number
                  description: The page size of the action.
                  example: 30
                  default: 100
                continuationToken:
                  type: string
                  description: The continuation token of the action query.
                  example: "{\"OptimisticDirectExecutionToken\":{\"token\":\"+RID:~3sx7ANlv76tuhh4AAAAAAA==#RT:3#TRC:11#ISV:2#IEO:65567#QCF:8#FPC:AgF6enoOAGEGAMBBQAMA6oBxAPAP\",\"range\":{\"min\":\"\",\"max\":\"FF\"}}}"
                orderBy:
                  type: array
                  description: The order by of the action.
                  items:
                    type: object
                    properties:
                      field:
                        type: string
                        enum: [createdAt, findingName, findingType, findingSubType, severity]
                        description: The field of the order by
                        example: name
                      direction:
                        type: string
                        enum: [asc, desc]
                        description: The direction of the order by
                        example: desc
                        default: asc
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 100
                  continuationToken:
                    type: string
                    example: "{\"OptimisticDirectExecutionToken\":{\"token\":\"+RID:~3sx7ANlv76tshh4AAAAAAA==#RT:1#TRC:5#RTD:6KXA2it83DMnRddqkyOFBUlqaGkA#ISV:2#IEO:65567#QCF:8#FPC:AgF6enoWAGEG8P9BQAMA6oBxAPAPYQGA/3EBAAc=\",\"range\":{\"min\":\"\",\"max\":\"FF\"}}}"
                  value:
                    type: array
                    items:
                      $ref: "#/components/schemas/action"

  /actions/grouped:
    post:
      operationId: get actions by query filters and group by
      description: List all actions with a query and group by.
      tags:
        - Actions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: "#/components/schemas/actionFilter"
                groupBy:
                  type: string
                  enum: [findingType, findingSubType, findingName, severity]
                  description: The group by of the action.
                  example: severity
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/actionGrouped"

  /actions:
    post:
      operationId: create actions
      description: Create actions.
      tags:
        - Actions
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/action"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/action"

  /actions/{actionId}:
    parameters:
      - name: actionId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: get action by id
      description: Get an action by id.
      tags:
        - Actions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/action"
    put:
      operationId: update action
      description: Update an action.
      tags:
        - Actions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/action"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/action"

  /actions/facets:
    post:
      operationId: get action facets
      description: UI API - get action facets.
      tags:
        - Actions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: "#/components/schemas/actionFilter"
                facets:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        enum:
                          [
                            findingType,
                            findingSubType,
                            findingName,
                            assignedTo,
                            domainId,
                          ]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  facets:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: object
                        properties:
                          value:
                            type: string
                            example: 4e74f902-62f5-49f4-8258-92ed2b8537ba
                          count:
                            type: number
                            example: 0

  /controls/scores/query:
    post:
      operationId: QueryScores
      description: Query control scores or control group scores based on the type specified.
      tags:
        - Score
      parameters:
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: [ControlNode, ControlGroup]
          description: Type of the scores to query, either ControlNode or ControlGroup.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/QueryControlScoresRequest'
                - $ref: '#/components/schemas/QueryControlGroupScoresRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ControlScore'
                    - $ref: '#/components/schemas/ControlGroupScore'

components:
  schemas:
    BaseEntity:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: "7e255139-b654-4c8d-a4bd-fbb5a243e83f"
        systemData:
          type: object
          readOnly: true
          properties:
            lastModifiedAt:
              type: string
              example: "2024-03-12T05:18:51.8846471Z"
              description: Date of the most recent change to the object.
            lastModifiedBy:
              type: string
              example: 766BF2B9-5D8A-4FB1-B8D5-D30A53E22A9E
              description: Person id of the most recent change to the object.
            createdAt:
              type: string
              example: "2024-03-12T05:18:51.8846471Z"
              description: Date the object was created.
            createdBy:
              type: string
              example: 766BF2B9-5D8A-4FB1-B8D5-D30A53E22A9E
              description: Person id of the most recent change to the object.
    Control:
      type: object
      oneOf:
        - $ref: "#/components/schemas/ControlGroup"
        - $ref: "#/components/schemas/ControlNode"
      discriminator:
        propertyName: type
        mapping:
          ControlGroup: "#/components/schemas/ControlGroup"
          ControlNode: "#/components/schemas/ControlNode"

    ControlBase:
      allOf:
        - $ref: "#/components/schemas/BaseEntity"
        - type: object
          required:
            - name
            - type
          properties:
            name:
              type: string
              description: The name of the control.
              example: "Data estate curation"
            description:
              type: string
              description: The description of the control.
              example: "Data estate curation"
            contacts:
              $ref: "#/components/schemas/Contacts"
            systemTemplate:
              $ref: "#/components/schemas/SystemTemplateNames"
            statusPaletteConfig:
              type: object
              required:
                - targetScore
                - fallbackStatusPaletteId
              properties:
                targetScore:
                  type: number
                  description: The target score of the control. The value should be between 0 and 1.
                  minimum: 0
                  maximum: 1
                  example: 0.8
                fallbackStatusPaletteId:
                  type: string
                  description: The fallback status palette id of the control.
                  example: "7e255139-b654-4c8d-a4bd-fbb5a243e83f"
                statusPaletteRules:
                  type: array
                  items:
                    type: object
                    required:
                      - rule
                      - statusPaletteId
                    properties:
                      rule:
                        $ref: "#/components/schemas/Rule"
                      statusPaletteId:
                        type: string
                        description: The palette id of the control.
                        example: "7e255139-b654-4c8d-a4bd-fbb5a243e83f"
            status:
              type: string
              enum: [Enabled, Disabled]
              description: The status of the control.
              default: "Enabled"
              example: "Enabled"
            type:
              type: string
              enum: [ControlGroup, ControlNode]
              description: The type of the control.
              example: "Node"

    ControlGroup:
      allOf:
        - $ref: "#/components/schemas/ControlBase"
        - type: object
          properties:
            type:
              type: string
              enum: [ControlGroup]
              description: The type of the control.
              example: "ControlGroup"

    ControlNode:
      allOf:
        - $ref: "#/components/schemas/ControlBase"
        - type: object
          properties:
            type:
              type: string
              enum: [ControlNode]
              description: The type of the control.
              example: "ControlNode"
            typeProperties:
              type: object
              properties:
                groupId:
                  type: string
                  description: The group id of the control.
                  example: "7e255139-b654-4c8d-a4bd-fbb5a243e83f"
                domains:
                  type: array
                  items:
                    type: string
                  description: The domains of the control.
                  example: ["7e255139-b654-4c8d-a4bd-fbb5a243e83f"]
                assessmentId:
                  type: string
                  description: The assessment id of the control.
                  example: "7e255139-b654-4c8d-a4bd-fbb5a243e83f"

    Schedule:
      allOf:
        - $ref: "#/components/schemas/BaseEntity"
        - type: object
          properties:
            status:
              type: string
              enum: [Enabled, Disabled]
              description: The status of the schedule.
              default: "Enabled"
              example: "Enabled"
            frequency:
              type: string
              enum: [Hour, Day, Week, Month]
              description: The frequency of the schedule.
              example: "Day"
            interval:
              type: number
              description: The interval of the schedule.
              example: 1
            startTime:
              type: string
              description: The start time of the schedule.
              example: "2024-03-12T05:18:51.8846471Z"
            endTime:
              type: string
              description: The end time of the schedule.
              example: "2024-03-12T05:18:51.8846471Z"
            schedule:
              $ref: "#/components/schemas/ScheduleProperties"
            timeZone:
              type: string

    ScheduleProperties:
      type: object
      properties:
        hours:
          type: array
          items:
            type: number
            minimum: 0
            maximum: 23
        minutes:
          type: array
          items:
            type: number
            minimum: 0
            maximum: 59
        monthDays:
          type: array
          items:
            type: number
            minimum: 1
            maximum: 31
        weekDays:
          type: array
          items:
            type: string
            enum:
              - Sunday
              - Monday
              - Tuesday
              - Wednesday
              - Thursday
              - Friday
              - Saturday
        monthlyOccurrences:
          type: array
          items:
            $ref: "#/components/schemas/MonthlyOccurrences"

    MonthlyOccurrences:
      type: object
      properties:
        day:
          type: string
          enum:
            - Sunday
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
        occurrence:
          type: number

    StatusPalette:
      allOf:
        - $ref: "#/components/schemas/BaseEntity"
        - type: object
          properties:
            name:
              type: string
              description: The name of the status palette.
              example: "Unhealthy"
            color:
              type: string
              description: The color of the status palette.
              example: "#FF5733"
            reserved:
              type: boolean
              default: false
              readOnly: true

    Rule:
      oneOf:
        - $ref: "#/components/schemas/RuleGroup"
        - $ref: "#/components/schemas/RuleSimple"
        - $ref: "#/components/schemas/RuleExpression"
      discriminator:
        propertyName: type
        mapping:
          RuleGroup: "#/components/schemas/RuleGroup"
          SimpleRule: "#/components/schemas/RuleSimple"
          ExpressionRule: "#/components/schemas/RuleExpression"

    RuleBase:
      allOf:
        - $ref: "#/components/schemas/BaseEntity"
        - type: object
          required:
            - type
          properties:
            type:
              type: string
              enum: [RuleGroup, SimpleRule, ExpressionRule]
              description: The type of the rule.
              example: "SimpleRule"

    RuleGroup:
      allOf:
        - $ref: "#/components/schemas/RuleBase"
        - type: object
          properties:
            type:
              type: string
              enum: [RuleGroup]
              description: The type of the rule.
              example: "RuleGroup"
            typeProperties:
              type: object
              required:
                - groupOperator
                - rules
              properties:
                groupOperator:
                  type: string
                  enum: [And, Or, Not]
                  description: The group operator of the rule.
                  example: "And"
                rules:
                  type: array
                  items:
                    $ref: "#/components/schemas/Rule"
                  minItems: 1
                  description: The rules of the group.

    RuleSimple:
      allOf:
        - $ref: "#/components/schemas/RuleBase"
        - type: object
          properties:
            type:
              type: string
              enum: [SimpleRule]
              description: The type of the rule.
              example: "SimpleRule"
            typeProperties:
              type: object
              required:
                - checkPoint
                - operator
              properties:
                checkPoint:
                  $ref: "#/components/schemas/CheckPoints"
                operator:
                  type: string
                  enum:
                    [
                      Equal,
                      NotEqual,
                      GreaterThan,
                      GreaterThanOrEqual,
                      LessThan,
                      LessThanOrEqual,
                      IsNullOrEmpty,
                      IsNotNullOrEmpty,
                      IsTrue,
                      IsFalse,
                      Normalize,
                    ]
                  description: The operator of the rule.
                  example: "Equal"
                operand:
                  type: string
                  description: The value of the rule.
                  example: "1"

    RuleExpression:
      allOf:
        - $ref: "#/components/schemas/RuleBase"
        - type: object
          properties:
            type:
              type: string
              enum: [ExpressionRule]
              description: The type of the rule.
              example: "ExpressionRule"
            typeProperties:
              type: object
              properties:
                checkPoint:
                  $ref: "#/components/schemas/CheckPoints"
                expression:
                  type: string
                  description: The expression of the rule.
                  example: "Score > 1"

    CheckPoints:
      type: string
      enum:
        [
          Score,
          DataProductDescriptionLength,
          DataProductBusinessUseLength,
          DataProductOwnerCount,
          DataProductAllRelatedAssetsHaveOwner,
          DataProductAllRelatedAssetsHaveDQScore,
          DataProductRelatedDataAssetsCount,
          DataProductRelatedObjectivesCount,
          DataProductRelatedTermsCount,
          DataProductHasDataAccessPolicy,
          DataProductHasSelfServiceAccessPolicy,
          DataProductHasDataUsagePurpose,
          DataProductEndorsed,
          DataProductStatus,
          DataProductHasDQScore,
          DataAssetClassificationCount,
          CDERelatedDataAssetsCount,
          CDEOwnerCount,
          CDEDescriptionLength,
          CDERelatedTermsCount,
          CDEAllRelatedAssetsHaveClassification,
          BusinessDomainCriticalDataElementCount,
          DataQualityScore,
        ]
      description: The field of the rule.
      example: "Score"

    SystemTemplateNames:
      type: string
      readOnly: true
      enum: [CDMC]
      description: Is system defined control and the template name.
      example: "CDMC"

    Assessment:
      allOf:
        - $ref: "#/components/schemas/BaseEntity"
        - type: object
          required:
            - name
            - targetEntityType
          properties:
            name:
              type: string
              description: The name of the assessment.
              example: "Data estate curation"
            targetEntityType:
              type: string
              enum:
                [DataProduct, DataAsset, CriticalDataElement, BusinessDomain]
              description: The target entity type of the assessment.
              example: "DataProduct"
            targetQualityType:
              type: string
              enum: [MetadataQuality, DataQuality]
              default: "MetadataQuality"
              description: The target quality type of the assessment.
              example: "MetadataQuality"
            rules:
              type: array
              items:
                $ref: "#/components/schemas/AssessmentRule"
              description: The rules of the assessment.
            aggregation:
              $ref: "#/components/schemas/AssessmentAggregation"
            systemTemplate:
              $ref: "#/components/schemas/SystemTemplateNames"

    AssessmentRule:
      type: object
      properties:
        id:
          type: string
          description: The id of the assessment rule.
          example: "7e255139-b654-4c8d-a4bd-fbb5a243e83f"
        rule:
          $ref: "#/components/schemas/Rule"
          description: The rule of the assessment rule.
        actionProperties:
          type: object
          properties:
            name:
              type: string
              description: The action name.
              example: "Missing classification"
            severity:
              type: string
              enum: [Low, Medium, High]
              description: The severity of the action.
              example: "Low"
            reason:
              type: string
              description: The reason of the action.
              example: "Missing classification"
            recommendation:
              type: string
              description: The recommendation of the action.
              example: "Recommendation"

    AssessmentAggregation:
      oneOf:
        - $ref: "#/components/schemas/AssessmentAggregationSimple"
        - $ref: "#/components/schemas/AssessmentAggregationExpression"
      discriminator:
        propertyName: type
        mapping:
          Simple: "#/components/schemas/AssessmentAggregationSimple"
          Expression: "#/components/schemas/AssessmentAggregationExpression"

    AssessmentAggregationBase:
      type: object
      properties:
        type:
          type: string
          enum: [Simple, Expression]
          description: The type of the aggregation.
          example: "Simple"

    AssessmentAggregationSimple:
      allOf:
        - $ref: "#/components/schemas/AssessmentAggregationBase"
        - type: object
          properties:
            type:
              type: string
              enum: [Simple]
              description: The type of the aggregation.
              example: "Simple"
            typeProperties:
              type: object
              properties:
                aggregationType:
                  type: string
                  enum: [Count, Sum, Average, Min, Max, DistinctCount]
                  description: The aggregation type of the assessment.
                  example: "Average"

    AssessmentAggregationExpression:
      allOf:
        - $ref: "#/components/schemas/AssessmentAggregationBase"
        - type: object
          properties:
            type:
              type: string
              enum: [Expression]
              description: The type of the aggregation.
              example: "Expression"
            typeProperties:
              type: object
              properties:
                expression:
                  type: string
                  description: The expression of the assessment.
                  example: "Score > 1"

    actionFilter:
      type: object
      properties:
        assignedTo:
          type: array
          items:
            type: string
          description: The assigned to of the action.
        status:
          type: array
          items:
            type: string
            enum: [NotStarted, InProgress, Resolved, Ignored]
          description: The status of the action.
        categories:
          type: array
          items:
            type: string
            enum: [DataQuality, HealthControl]
          description: The categories of the action.
        targetEntityType:
          type: string
          enum:
            [
              DataProduct,
              BusinessDomain,
              GlossaryTerm,
              DataAsset,
              DataQualityAsset,
              CriticalDataElement
            ]
          description: The target entity type of the action.
        targetEntityIds:
          type: array
          items:
            type: string
          description: The target entity ids of the action.
        findingTypes:
          type: array
          items:
            type: string
          description: The finding type of the action.
        findingSubType:
          type: array
          items:
            type: string
          description: The finding sub type of the action.
        findingName:
          type: array
          items:
            type: string
          description: The finding name of the action.
        severity:
          type: string
          enum: [Low, Medium, High]
          description: The severity of the action.
        domainIds:
          type: array
          items:
            type: string
          description: The domain ids of the action.
        createTimeRange:
          type: object
          description: The create time range of the action.
          properties:
            start:
              type: string
              description: The start time of the create time range.
            end:
              type: string
              description: The end time of the create time range.

    action:
      type: object
      required:
        - category
        - targetEntityType
        - targetEntityId
        - findingType
        - findingSubType
        - findingName
        - findingId
        - severity
        - domainId
      properties:
        id:
          type: string
          readOnly: true
          example: "7e255139-b654-4c8d-a4bd-fbb5a243e83f"
        status:
          type: string
          enum: [NotStarted, InProgress, Resolved, Ignored]
          description: The status of the action.
        targetEntityType:
          type: string
          enum:
            [
              DataProduct,
              BusinessDomain,
              Term,
              DataAsset,
              DataQualityAssessment,
            ]
          description: The target entity type of the action.
        targetEntityId:
          type: string
          description: The target entity id of the action.
        findingType:
          type: string
          description: The finding type of the action.
        findingSubType:
          type: string
          description: The finding sub type of the action.
        findingName:
          type: string
          description: The finding name of the action.
        findingId:
          type: string
          description: The finding id of the action.
        severity:
          type: string
          enum: [Low, Medium, High]
          description: The severity of the action.
        recommendation:
          type: string
          description: The recommendation of the action.
        assignedTo:
          type: array
          items:
            type: string
          description: The assigned to of the action.
        domainId:
          type: string
          description: The domain id of the action.
        category:
          type: string
          enum: [DataQuality, HealthControl]
          description: The category of the action.
        reason:
          type: string
          description: The reason of the action.
        extraProperties:
          type: object
          description: The extra properties of the action.
          properties:
            type:
              type: string
              description: The type of the extra properties.
              enum: ["AssessmentAction", "ProfilingAction", "ControlAction"]
            data:
              type: object
              description: Any properties can be added here.
        systemData:
          type: object
          readOnly: true
          properties:
            lastModifiedAt:
              type: string
              example: "2024-03-12T05:18:51.8846471Z"
              description: Date of the most recent change to the object.
            lastModifiedBy:
              type: string
              example: 766BF2B9-5D8A-4FB1-B8D5-D30A53E22A9E
              description: Person id of the most recent change to the object.
            createdAt:
              type: string
              example: "2024-03-12T05:18:51.8846471Z"
              description: Date the object was created.
            lastHintAt:
              type: string
              example: "2024-03-12T05:18:51.8846471Z"
              description: Date the object was created.
            hintCount:
              type: number
              example: 1
              description: The count of the hint.
            resolvedAt:
              type: string
              example: "2024-03-12T05:18:51.8846471Z"
              description: Date the object was created.

    simpleAction:
      type: object
      properties:
        findingType:
          type: string
          description: The finding type of the action.
        findingSubType:
          type: string
          description: The finding sub type of the action.
        findingName:
          type: string
          description: The finding name of the action.
        severity:
          type: string
          enum: [Low, Medium, High]
          description: The severity of the action.

    actionGrouped:
      type: array
      items:
        type: object
        properties:
          groupName:
            type: string
            description: The group name of the actions.
            example: "Data estate curation"
          count:
            type: number
            description: The count of the actions.
          items:
            type: array
            items:
              $ref: "#/components/schemas/simpleAction"
            description: The actions of the group.

    Alert:
      allOf:
        - $ref: "#/components/schemas/BaseEntity"
        - type: object
          properties:
            alerts:
              type: array
              items:
                $ref: "#/components/schemas/AlertEntity"

    AlertEntity:
      type: object
      properties:
        targetControlIds:
          type: array
          items:
            type: string
          description: The control ids of the alert entity.
          example: ["7e255139-b654-4c8d-a4bd-fbb5a243e83f"]
        rule:
          $ref: "#/components/schemas/Rule"
          description: The rules of the alert entity.
        notify:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [Email, Owner]
                description: notify target type
                example: "Email"
              value:
                type: string
                description: notify target value
                example: "robin@contoso.com"

    Contacts:
      type: object
      additionalProperties:
        type: array
        description: A list of AAD oid for the person or group
        example:
          [
            4e74f902-62f5-49f4-8258-92ed2b8537ba,
            5e74f902-62f5-49f4-8258-92ed2b8537ba,
          ]
        items:
          type: object
          properties:
            id:
              type: string
              description: AAD oid for the person or group
            description:
              type: string
              description: A description of this user assignment
      example:
        owner:
          [
            { id: 4e74f902-62f5-49f4-8258-92ed2b8537ba, description: db1 },
            { id: 5e74f902-62f5-49f4-8258-92ed2b8537ba, description: db2 },
          ]
        expert:
          [
            { id: 4e74f902-62f5-49f4-8258-92ed2b8537ba, description: db1 },
            { id: 5e74f902-62f5-49f4-8258-92ed2b8537ba, description: db2 },
          ]

    QueryScoresRequestBase:
      type: object
      properties:
        domainIds:
          type: array
          items:
            type: string
          description: The domain ids of the score.
          example: ["7e255139-b654-4c8d-a4bd-fbb5a243e83f"]
        recordLatestCounts:
          type: number
          description: The latest record counts of the score.
          example: 5
          default: 1
        recordTimeRange:
          type: object
          description: The record time range of the score.
          properties:
            start:
              type: string
              description: The start time of the record time range.
            end:
              type: string
              description: The end time of the record time range.

    QueryControlScoresRequest:
      allOf:
        - $ref: '#/components/schemas/QueryScoresRequestBase'
        - type: object
          properties:
            controlIds:
              type: array
              items:
                type: string
              description: The control ids of the score.
              example: ["7e255139-b654-4c8d-a4bd-fbb5a243e83f"]
    
    QueryControlGroupScoresRequest:
      allOf:
        - $ref: "#/components/schemas/QueryScoresRequestBase"
        - type: object
          properties:
            controlGroupIds:
              type: array
              items:
                type: string
              description: The control group ids of the score.
              example: ["7e255139-b654-4c8d-a4bd-fbb5a243e83f"]

    ControlScore:
      type: object
      properties:
        time:
          type: string
          format: date-time
          description: The timestamp when the score was recorded.
          example: "2023-04-01T12:34:56Z"
        controlId:
          type: string
          description: An identifier for the control associated with this score.
          example: "control123"
        computingJobId:
          type: string
          description: The identifier of the computing job that generated this score.
          example: "job456"
        scheduleRunId:
          type: string
          description: The identifier of the schedule run that generated this score.
          example: "schedule789"
        score:
          type: number
          description: The aggregated score.
          example: 0.85
    
    ControlGroupScore:
      type: object
      properties:
        time:
          type: string
          format: date-time
          description: The timestamp when the score was recorded.
          example: "2023-04-01T12:34:56Z"
        controlGroupId:
          type: string
          description: An identifier for the control group associated with this score.
          example: "controlGroup123"
        scheduleRunId:
          type: string
          description: The identifier of the schedule run that generated this score.
          example: "schedule789"
        score:
          type: number
          description: The aggregated score.
          example: 0.85
